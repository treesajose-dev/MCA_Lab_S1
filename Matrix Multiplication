/*
Matrix Multiplication 
@Treesa Jose
Roll no: 58   
Completed on: 27-07-2025
*/

#include <stdio.h>    // Standard I/O functions
#define MAX 5         // Maximum size of rows/columns for matrices

// Function to show menu and return user's choice
int menu() {
    int choice;
    printf("\nMENU\n1. Enter Matrices\n2. Display Matrices\n3. Multiply Matrices\n4. Exit\nEnter your choice: ");
    scanf("%d", &choice);
    return choice;   // return the chosen option
}

// Function to read matrix elements from user
void readMatrix(int mat[MAX][MAX], int rows, int cols) {
    int i, j;
    printf("Enter (%dx%d) elements:\n", rows, cols);
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            printf("[%d][%d]: ", i, j);   // prompt for each position
            scanf("%d", &mat[i][j]);
        }
    }
}

// Function to display a matrix
void displayMatrix(int mat[MAX][MAX], int rows, int cols) {
    int i, j;
    if (rows == 0 || cols == 0) {         // if not initialized
        printf("Matrix is empty.\n");
        return;
    }
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            printf("%d\t", mat[i][j]);    // print each element with tab
        }
        printf("\n");                     // newline after each row
    }
}

// Function to multiply two matrices A and B, store result in "result"
void multiplyMatrices(int A[MAX][MAX], int B[MAX][MAX], int result[MAX][MAX], int m, int n, int p, int q) {
    int i, j, k;
    if (n != p) {   // condition for multiplication: cols(A) == rows(B)
        printf("Matrix multiplication not possible. Columns of A must equal rows of B.\n");
        return;
    }

    // Step 1: Initialize result matrix with 0
    for (i = 0; i < m; i++) {
        for (j = 0; j < q; j++) {
            result[i][j] = 0;
        }
    }

    // Step 2: Perform multiplication
    for (i = 0; i < m; i++) {          // iterate over rows of A
        for (j = 0; j < q; j++) {      // iterate over columns of B
            for (k = 0; k < n; k++) {  // common dimension
                result[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    // Display multiplication result
    printf("\nResult of A x B:\n");
    displayMatrix(result, m, q);
}

// Main function
int main() 
{
    int A[MAX][MAX], B[MAX][MAX], result[MAX][MAX];  // Matrices
    int m = 0, n = 0, p = 0, q = 0;                  // Dimensions
    int choice;

    // Keep running until user chooses Exit (4)
    while ((choice = menu()) != 4) 
    {
        switch (choice) 
       {
            case 1: // Enter matrices
                printf("Enter number of rows and columns for Matrix A (max %d): ", MAX);
                scanf("%d%d", &m, &n);
                if (m <= 0 || m > MAX || n <= 0 || n > MAX) {   // validate size
                    printf("Invalid size for Matrix A. Try again.\n");
                    break;
                }
                readMatrix(A, m, n);   // read matrix A

                printf("Enter number of rows and columns for Matrix B (max %d): ", MAX);
                scanf("%d%d", &p, &q);
                if (p <= 0 || p > MAX || q <= 0 || q > MAX) {   // validate size
                    printf("Invalid size for Matrix B. Try again.\n");
                    break;
                }
                readMatrix(B, p, q);   // read matrix B
                break;

            case 2: // Display matrices
                printf("\nMatrix A:\n");
                displayMatrix(A, m, n);
                printf("\nMatrix B:\n");
                displayMatrix(B, p, q);
                break;

            case 3: // Multiply matrices
                multiplyMatrices(A, B, result, m, n, p, q);
                break;

            default: // Wrong choice entered
                printf("Invalid choice. Try again.\n");
        }
    }

    return 0;   // Program ends successfully
}
